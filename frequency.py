cipher1 = list("YCFYOSWRUXOROKSJJNWNREOKSMNEKNHSINYCXEKRSVBOIISHNJENIYNXEQOEQOWRROEVOAKSRYNEENXBOINSWRFCMNKNXNBOIISUXOROIVFSRBOIISHSCRYCFYOOWNRSVSWREKNWQNBSWBNFNYXSENOAXYCXEKRSVJSXECNHBOIUOXESYFVEOGNEKNXROESEEKSEECINUXOROQSHHECFFCWKCHEQNNWHBOIISSHEKNKOYYCEHBSFFNREKNCXXNHJOWHCYFNEQNWECNHYNEQNNWBKCFRKOORSWRBOICWGOUSGNSEEKCXEVEKXNNROEEQNFMNIOXNVNSXHJSHHNRROENSBKVNSXEKNYSGGCWHNHKSRGCMNWMNXVFCMNFVBOIYCWNRYCXEKRSVJSXECNHSEYSGNWRYAEWOQCEQSHAWRNXHEOOREKSEHOINEKCWGZACENNDBNJECOWSFQSHYNCWGJFSWWNRUOXEKSESAEAIW")
cipher
#cipher 1 most likely vignere
#cipher 2 most likely playfair missing letter J

alphabet        = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
key             = list("SYBRNUGKCLPFIWOJZXHEAMQDVT")
loweralphabet   = list("abcdefghi--lmnopqrstuvwxy-")
#letter that never appear
#ciphertext: L P T
#plaintext : J K Z

for x in range(0,len(cipher1)):
    for y in range(0,26):
        if (cipher1[x] == key[y]):
            cipher1[x] = loweralphabet[y]
# print cipher1
plaintext = cipher1

print plaintext
for x in range(0, len(plaintext)):
    if plaintext[x] == '-':
        print "error"
# for x in range(0, 26):
#      print alphabet[x] + ": " + str(cipher1.count(alphabet[x]))

# ncipher = cipher[::13]
# print ncipher
#
# for x in range(0,26):
#     print alphabet[x] + ": " + str(ncipher.count(alphabet[x]))
#
#
#
# i = 0
#
# for x in range (1,100):
#     for y in range(0,len(cipher) - x):
#         if (cipher[y] == cipher[y+x]):
#             i = i + 1
#
#     t = i
#     print i
#     i = i - t
# dual = []
#
# for x in range(0,len(cipher2),2):
#     t = cipher2[x] + cipher2[x+1]
#     dual.append(t)
#     if cipher2[x] == cipher2[x+1]:
#         i = i + 1
# # print i
#
# storage = []
# for x in range(0,len(dual)):
#     if storage.count(dual[x]) == 0:
#         storage.append(dual[x])
#         print dual[x] + ": " + str(dual.count(dual[x]))
#
# group = []
#
#
# for x in range(0,26):
#     print alphabet[x]
#     for y in range(0,len(storage)):
#         if storage[y].count(alphabet[x]):
#             print storage[y]